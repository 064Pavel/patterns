Singleton
    - когда нам нужен единственный экземпляр и глобальная точка доступа
    Пример: класс подключения к БД (экономия ресурсов и избегание конфликтов)

Factory Method
    - когда нужно делегировать создание объекта и иметь возможность в подклассах изменять тип создоваемого объекта
    Пример: вынос создания сущностей из сервиса в отдельные фабричные методы

Abstract Factory
    - когда нужно создовать семейства взаимосвязанных объектов и для того чтобы невелировать проблему фабричного метода (создание параллельных иерархий)
    Пример: GuiFactory

Builder
    - когда нужно избавиться от монструозного конструктора, иметь возможность последовательно создовать объект и иметь возможность создавать разные представления одного объекта
    Пример: QueryBuilder

Prototype
    - когда нужно создовать новые (сложные) объекты путем клонирования, чтобы избежать инстанциирования с нуля и не нарушать SRP (класс не должен отвечать и за клонирование и за свою основную задачу)
    Пример: кэширование сложных объектов (графический редактор, 3D моделирование)

Adapter
    - когда у нас должны взаимодействовать объекты с несовместимыми интерфейсами
    Пример: У нас уже есть одна библиотека для раблоты с HTTP-запросами и нам надо перейти на другую, чтобы не переписывать весь код, то можно обернуть в адаптер
    Еще пример: GuzzleHTTP, а именно StreamAdapter и CurlAdapter

Decorator
    - когда нам нужно изменять динамически функциональность объекта или расширить финализированный класс
    Пример: К существуещему коду добавить логирование

Facade
    - когда нужно предоставить простой или урезанный интерфейс к сложной системе, скрыв ее реализацию
    Пример: Фасады из Laravel...DB, AUTH, CACHE и тп

CoR
    - когда нам нужно обрабатывать запрос в определенной последовательности и с разными уровнями ответственности
    Пример: Middleware из Laravel

Observer
    - когда нужно следить и реагировать внутри объекта на изменения в другом объекте
    Пример: Symfony Kernel Event Listener

Iterator
    - когда нужно последовательно обойти элементы составной структуры, не вдаваясь в детали реализации
    Пример: перебор коллекций

Strategy
    - когда есть несколько вариантов алгоритмов, которые могут решить задачу и нужно исходя из контекста динамически подставлять нужный
    Пример: Прием платежей через различные системы с помощью Стратегии